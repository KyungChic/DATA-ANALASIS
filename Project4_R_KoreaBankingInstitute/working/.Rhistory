a -> 1
1 -> a
a = 1
a = 3
install.packages("ggplot2")
library(ggplot2)
setwd("C:/Users/Gargantua/Desktop/data_analysis/Project4. R고 보면 쉬운 빅데이터 분석 실무/working")
setwd("C:/Users/Gargantua/Desktop/뉴민")
setwd("C:/Users/Gargantua/Desktop/data_analysis/Project4_R_KoreaBankingInstitute/working")
iris <- read.csv("C:/Users/Gargantua/Desktop/data_analysis/Project4_R_KoreaBankingInstitute/working/lesson_3/iris.txt", sep="")
View(iris)
iris$Sepal.Length
y <- ifelse(iris$Sepal.Length>5, "more than 5", "less than 5")
y
iris$Sepal.Length_level <- y
View(iris)
View(iris)
head(iris)
iris <- read.csv("C:/Users/Gargantua/Desktop/data_analysis/Project4_R_KoreaBankingInstitute/working/lesson_3/iris.txt", sep="")
View(iris)
aggregate(Sepal.Length ~ Species, data = iris, mean)
aggregate(Sepal.Length ~ Species, data = iris, sum)
aggregate(. ~ Species, data = iris, mean)
customer_rfm <- read.csv("C:/Users/Gargantua/Desktop/data_analysis/Project4_R_KoreaBankingInstitute/working/lesson_3/customer_rfm.txt", sep="")
View(customer_rfm)
str(customer_rfm)
head(customer_rfm)
aggregate(monetary ~ monetary_level, data = customer_rfm, mean)
aggregate(recency ~ recency_level, data = customer_rfm, mean)
aggregate(frequency ~ frequency_level, data = customer_rfm, mean)
#프로파일링 데이터 제작
rfm_level <- aggregate(. ~ monetary_level + frequency_level + recency_level, data = customer_rfm, mean)
rfm_level
View(rfm_level)
#고객세분화 데이터 시각화해보기
library(rgl)
install.packages("rgl")
#고객세분화 데이터 시각화해보기
#rgl라ㅇ브러리 불러오기
library(rgl)
#3d plot을 이용한 RFM 지수 시각화
plot3d(customer_rfm$monetary, customer_rfm$frequency, customer_rfm$recency,
xlab = 'Monetarym', ylab = 'Frequency', zlab = 'Recency', col = "blue", size = 6)
q()
travel <- read.csv("C:/Users/Gargantua/Desktop/data_analysis/Project4_R_KoreaBankingInstitute/working/lesson_4/travel.csv")
View(travel)
#데이터 살피기
str(travel)
head(travel)
#데이터 슬라이싱
travel
travel[1:20,]
#통합 구문을 통한 집계
aggregate(. ~ destination, data=travel, sum)
#데이터 추리기
travel1<-travel[,c("cust_id", "destination")]
travel1
#데이터를 트랜잭션으로 변환
travel2 <- split(travel$destination, travel$cust_id)
travel2
install.packages("arules")
#트랜잭션 전환
travel3 <- as(travel2, "transactions")
#트랜잭션 전환
library(arules)
travel3 <- as(travel2, "transactions")
travel3
summary(travel3)
#트랜잭션을 역으로 DF로 전환
as(travel3, "data.frame")
#트랜잭션 구조 살피기 : tabel 이용
table(travel3)
#트랜잭션 구조 살피기 : tabel 이용
table(travel1)
#연관성 분석
rules <- apriori(travel3, parameter = list(supp=0.15, conf=0.8))
summary(rules)
inspect(rules)
install.packages("arulesViz")
# 0) 관련패키지다운로드
library(arules)
library(datasets)
# 1) 데이터불러오기
data(Groceries)
summary(Groceries)
# 2) 가장많이구매한 상위 20개 상품 시각화
itemFrequencyPlot(Groceries,topN=20,type="absolute")
# 3) 연관성분석 수행 후 확인
rules <- apriori(Groceries, parameter = list(supp=0.001, conf = 0.8))
summary(rules)
inspect(rules)
rules2<-sort(apriori(Groceries, parameter=list(supp=0.001,conf = 0.08,minlen=2),
appearance = list(default="rhs",lhs="whole milk"),
control = list(verbose=F)),decreasing=TRUE,by="confidence")
inspect(rules2)
inspect(rules2[1:5,])
# 5) 연관성규칙 시각화
library(arulesViz)
plot(rules2,method="graph",interactive=TRUE,shading=NA)
plot(rules2,method="graph",interactive=TRUE,shading=NA)
plot(rules2,method="graph",engine = 'interactive',shading=NA)
plot(rules2,method="graph",engine='interactive',shading=NA)
plot(rules2,method="graph",interactive = TRUE, shading=NA)
v <- c(1,2,3,4,5)
v
v1 <- c(1:5)
v1
v2<-c(1:5, 10, 100, 101:105, -10)
v2
v+1
v+v1
v>3
v==1
c(v,6)
c(v,NA)
is.numeric(v)
is.factor(v)
c(v,"남자")
is.NA(c(v,NA))
is.na(c(v,NA))
head(iris)
str(iris)
iris$Species<-as.character(iris$Species)
head(iris)
str(iris)
iris_1<-iris[1:10,]
iris_2<-iris[11:20,]
rbind(iris_1,iris_2)
BOD
cbind(BOD,iris[1:6,])
credit_data <- read.csv("C:/Users/Gargantua/Desktop/data_analysis/Project4_R_KoreaBankingInstitute/working/lesson_5/credit_data.txt", sep="")
View(credit_data)
str(dredit_data)
str(credit_data)
head(credit_data)
summary(credit_data)
credit_data$bank <- as.factor(credit_data$bank)
str(credit_data)
head(credit_data)
summary(credit_data)
aggregate(monetary~bank, data=credit_data, mean)
# 4) 로지스틱회귀분석 수행
model <- glm(fraud~bank+credit_card+monetary,data=credit_data,family="binomial")
summary(model)
# 5) 로지스틱 회귀분석으로부터 부정사용 의심 점수 계산(100점 만점 환산)
score<-fitted(model)*100
head(score)
result <- cbind(credit_data, score)
head(result)
# 패키지 불러오기
library(ggplot2)
ggplot(result,aes(x=score,fill=bank))+
geom_histogram(binwidth=0.6,alpha=0.5,position="identity")+
ggtitle("주거래 은행에 따른 고객의심 부정사용 의심 점수")+
theme_bw()
iris[,1:4]
1:4
iris[,1:5]
iris[,c("Sepal.Length", "Sepal.Width")]
names(iris)
#iris 데이터의 변수 명을 벡터로 추출가능
names(iris)[1:4]
iris_name <- name(iris)[1:4]
iris_name <- names(iris)[1:4]
iris[,iris_name]
iros[1:10,]
iris[1:10,]
iris[iris$Sepal.Length > 7,]
#대괄호 기준으로 콤마 왼쪽에 논리형 연산을 넣어주면 조건에 맞는 CASE가 추출된다.
iris$Sepal.Length > 7
iris[iris$Species=="virginica",]
iris[iris$Sepal.Length>7 & iris[iris$Species=="virginica"]]
iris[iris$Sepal.Length>7 && iris[iris$Species=="virginica"]]
iris[iris$Sepal.Length>7 & iris$Species=="virginica"]
iris[iris$Sepal.Length>7 & iris$Species=="virginica"]
iris[iris$Sepal.Length>7 & iris$Species=="virginica",]
subset(iris, Sepal.Length>7 & Species=="virginica")
iris[iris$Species=="virginica" & iris$Petal.Width > 2.3, 4:5]
subset(iris[,4:5], Species=="virginica" & Petal.Width > 2.3)
customer_purchase <- read.csv("C:/Users/Gargantua/Desktop/data_analysis/Project4_R_KoreaBankingInstitute/working/lesson_6/customer_purchase.txt", sep="")
View(customer_purchase)
#데이터 살펴보기
str(customer_purchase)
head(customer_purchase)
summary(customer_purchase)
#군집분석
km <- kmeans(customer_purchase,3)
km
customer_vip <- read.csv("C:/Users/Gargantua/Desktop/data_analysis/Project4_R_KoreaBankingInstitute/working/lesson_6/customer_vip.txt", sep="")
View(customer_vip)
result <- cbind(customer_purchase, cluster-km$cluster, cust_level-customer_vip$vip)
result <- cbind(customer_purchase,cluster-km$cluster,cust_level-customer_vip$vip)
result <- cbind(customer_purchase,cluster=km$cluster,cust_level=customer_vip$vip)
summary(result)
str(result)
result$cluster <- as.factor(result$cluster)
summary(result)
aggregate(monetary~cust_level, data=result, mean)
aggregate(monetary~cluster, data=result, mean)
subset(result, cust_level!="일반")
# 1) 데이터 불러오기
iris
mtcars
head(iris)
mean(iris$Sepal.Length)
median(iris$Sepal.Length)
sd(iris$Sepal.Length)
m1<-mean(iris$Sepal.Length)
m2<-median(iris$Sepal.Length)
s1<-sd(iris$Sepal.Length)
(iris$Sepal.Length-m1)/sd
summary(iris)
(iris$Sepal.Length-m1)/sd
(iris$Sepal.Length - m1)/sd
(iris$Sepal.Length - m1)/s1
iris$Sepal.Length_z<-(iris$Sepal.Length - m1)/s1
head(iris)
cor(iris, method = c("pearson"))
cor(iris[,c(1:4)], method = c("pearson"))
install.packages("performance")
install.packages("PerformanceAnalytics")
library(PerformanceAnalytics)
chart.Correlation(iris,c(1:4),pch=19)
chart.Correlation(iris[,c(1:4)],pch=19)
subset(iris, Species=="setosa" | Species=="virginica")
iris_test <- subset(iris, Species=="setosa" | Species=="virginica")
boxplot(Sepal.Length~species, data=iris_test)
boxplot(Sepal.Length~Species, data=iris_test)
t.test(iris_test$Sepal.Length~iris_test$Species, var.equal=T)
table(mtcars$vs, mtcars$cyl)
##카이제곱 검정
chisq.test(mtcars$vs, mtcars$cyl)
# 2) 시계열 데이터 시각화
ts.plot(AirPassengers)
AirPassengers
title("1949~1960년 월별 탑승 승객")
ts<-decompose(AirPassengers)
ts
plot(ts)
# 4) 시계열 분석 수행
fit <- arima(AirPassengers, order=c(1,0,0), list(order=c(2,1,0), period=12))
# 시계열 예측 수행
predict <- predict(fit, n.ahead=24)
# 6)  visual
ts.plot(AirPassengers, predict$pred, col=c(1,2,4,4), lty = c(1,1,2,2))
legend("topleft", c("실제", "예측"), col=c(1,2), lty=c(1,1))
# 1) 패키지불러오기
library(lattice)
# 2) Lattice 시각화 예시
trellis.device()
show.settings()
splom(~environmental,
panel=function(x,y){
panel.xyplot(x,y)
panel.loess(x,y)
})
x <- seq(pi/4, 5 * pi, length.out = 100)
y <- seq(pi/4, 5 * pi, length.out = 100)
r <- as.vector(sqrt(outer(x^2, y^2, "+")))
grid <- expand.grid(x=x, y=y)
grid$z <- cos(r^2) * exp(-r/(pi^3))
levelplot(z~x*y, grid, cuts = 50, scales=list(log="e"), xlab="",
ylab="", main="Weird Function", sub="with log scales",
colorkey = FALSE, region = TRUE)
# 1) 패키지 불러오기
library(ggplot2)
# 연속형
ggplot(iris,aes(x=Sepal.Length))+stat_bin(binwidth=0.2,aes(fill=..count..),colour="black")+ggtitle("꽃받침 길이 분포")+theme_bw()
ggplot(iris,aes(x=Sepal.Length))+geom_density(alpha=.2)+ggtitle("꽃받침의 너비 정도")+theme_bw()
# 연속형
ggplot(iris,aes(x=Sepal.Length))+stat_bin(binwidth=0.2,aes(fill=..count..),colour="black")+ggtitle("꽃받침 길이 분포")+theme_bw()
ggplot(iris,aes(x=Sepal.Length))+geom_density(alpha=.2)+ggtitle("꽃받침의 너비 정도")+theme_bw()
ggplot(iris,aes(x=Sepal.Length))+geom_density(alpha=.2)+ggtitle("꽃받침의 너비 밀도")+theme_bw()
# ?뿰?냽?삎 x 踰붿＜?삎
ggplot(iris, aes(x=factor(Species), y=Sepal.Width))+geom_boxplot(aes(fill=factor(Species)))+ggtitle("遺볤퐙 ?쑀?삎?뿉 ?뵲瑜? 苑껊컺移⑥쓽 ?꼫鍮?")+theme_bw()
ggplot(iris,aes(x=Sepal.Length))+geom_density(alpha=.2)+ggtitle("꽃받침의 너비 밀도")+theme_bw()
# 범주형
ggplot(infert, aes(education,fill=education))+geom_bar()+ggtitle("환자의 교육수준")+theme_bw()
ggplot(infert, aes(education,fill=education))+geom_bar()+coord_polar(theta = "y")+ggtitle("환자의 교육수준")+theme_bw()
# 연속형 x 연속형
ggplot(mtcars,aes(wt,disp))+geom_point()+geom_abline(intercept=-80,slope=100,colour="red")+ggtitle("臾닿쾶?뿉 ?뵲瑜? ?씠?룞踰붿쐞")+theme_bw()
# 연속형 x 연속형
ggplot(mtcars,aes(wt,disp))+geom_point()+geom_abline(intercept=-80,slope=100,colour="red")+ggtitle("무게에 따른 이동범위위")+theme_bw()
# 연속형 x 연속형
ggplot(mtcars,aes(wt,disp))+geom_point()+geom_abline(intercept=-80,slope=100,colour="red")+ggtitle("무게에 따른 이동범위")+theme_bw()
# 범주형 x 범주형
ggplot(mtcars, aes(vs,fill=factor(cyl)))+geom_bar(position=position_dodge())+ggtitle("엔진 유형에 따른 실린더 수")+theme_bw()
# 연속형 x 범주형
ggplot(iris, aes(x=factor(Species), y=Sepal.Width))+geom_boxplot(aes(fill=factor(Species)))+ggtitle("붓꽃 유형에 따른 꽃받침의 너비")+theme_bw()
ggplot(iris,aes(x=Sepal.Width,fill=Species))+geom_density(alpha=.3)+ggtitle("붓꽃 유형에 따른 꽃받침의 너비 밀도")+theme_bw()
ggplot(diamonds,aes(price,fill=clarity))+geom_histogram(binwidth = 600)+ggtitle("선명도 수준에 따른 다이아몬드의 가격분포")+scale_fill_brewer("YlGn")+theme_bw()
ggplot(diamonds,aes(price,fill=clarity))+geom_histogram(binwidth = 600)+ggtitle("선명도 수준에 따른 다이아몬드의 가격분포")+scale_fill_brewer("YlGn")+theme_bw()
ggplot(diamonds,aes(carat,price))+geom_point(aes(colour=clarity))+ggtitle("罹먮읉?뿉 ?뵲瑜? ?떎?씠?븘紐щ뱶?쓽 媛寃? + ?꽑紐낅룄 ?닔以")+theme_bw()
# 연속형 x 연속형 + a
ggplot(mtcars,aes(wt,disp))+geom_point(aes(size=cyl))+ggtitle("臾닿쾶?뿉 ?뵲瑜? ?씠?룞踰붿쐞 + ?떎由곕뜑 ?닔")+theme_bw()
# 연속형 x 연속형 + a
ggplot(mtcars,aes(wt,disp))+geom_point(aes(size=cyl))+ggtitle("무게에 따른 이동범위 + 실린더 수")+theme_bw()
ggplot(diamonds,aes(carat,price))+geom_point(aes(colour=clarity))+ggtitle("캐럿에 따른 다이아몬드의 가격 + 선명도 수준")+theme_bw()
ggplot(diamonds,aes(carat,price))+geom_point(aes(colour=clarity))+ggtitle("캐럿에 따른 다이아몬드의 가격 + 선명도 수준")+theme_bw()
# 1) 도표 분할
ggplot(diamonds,aes(carat))+geom_histogram(binwidth = 0.5,aes(fill=..count..))+facet_wrap(~ cut, ncol=5)+theme_bw()
# 2) 다른 두 산점도를 한 번에 시각화
ggplot(iris)+geom_point(aes(Sepal.Length,Sepal.Width),colour="brown",pch=17)+geom_point(aes(Petal.Length,Petal.Width),colour="purple",pch=19)+theme_bw()
