splom(~environmental,
panel=function(x,y){
panel.xyplot(x,y)
panel.loess(x,y)
})
x <- seq(pi/4, 5 * pi, length.out = 100)
y <- seq(pi/4, 5 * pi, length.out = 100)
r <- as.vector(sqrt(outer(x^2, y^2, "+")))
grid <- expand.grid(x=x, y=y)
grid$z <- cos(r^2) * exp(-r/(pi^3))
levelplot(z~x*y, grid, cuts = 50, scales=list(log="e"), xlab="",
ylab="", main="Weird Function", sub="with log scales",
colorkey = FALSE, region = TRUE)
# 1) 패키지 불러오기
library(ggplot2)
# 연속형
ggplot(iris,aes(x=Sepal.Length))+stat_bin(binwidth=0.2,aes(fill=..count..),colour="black")+ggtitle("꽃받침 길이 분포")+theme_bw()
ggplot(iris,aes(x=Sepal.Length))+geom_density(alpha=.2)+ggtitle("꽃받침의 너비 정도")+theme_bw()
# 연속형
ggplot(iris,aes(x=Sepal.Length))+stat_bin(binwidth=0.2,aes(fill=..count..),colour="black")+ggtitle("꽃받침 길이 분포")+theme_bw()
ggplot(iris,aes(x=Sepal.Length))+geom_density(alpha=.2)+ggtitle("꽃받침의 너비 정도")+theme_bw()
ggplot(iris,aes(x=Sepal.Length))+geom_density(alpha=.2)+ggtitle("꽃받침의 너비 밀도")+theme_bw()
# ?뿰?냽?삎 x 踰붿＜?삎
ggplot(iris, aes(x=factor(Species), y=Sepal.Width))+geom_boxplot(aes(fill=factor(Species)))+ggtitle("遺볤퐙 ?쑀?삎?뿉 ?뵲瑜? 苑껊컺移⑥쓽 ?꼫鍮?")+theme_bw()
ggplot(iris,aes(x=Sepal.Length))+geom_density(alpha=.2)+ggtitle("꽃받침의 너비 밀도")+theme_bw()
# 범주형
ggplot(infert, aes(education,fill=education))+geom_bar()+ggtitle("환자의 교육수준")+theme_bw()
ggplot(infert, aes(education,fill=education))+geom_bar()+coord_polar(theta = "y")+ggtitle("환자의 교육수준")+theme_bw()
# 연속형 x 연속형
ggplot(mtcars,aes(wt,disp))+geom_point()+geom_abline(intercept=-80,slope=100,colour="red")+ggtitle("臾닿쾶?뿉 ?뵲瑜? ?씠?룞踰붿쐞")+theme_bw()
# 연속형 x 연속형
ggplot(mtcars,aes(wt,disp))+geom_point()+geom_abline(intercept=-80,slope=100,colour="red")+ggtitle("무게에 따른 이동범위위")+theme_bw()
# 연속형 x 연속형
ggplot(mtcars,aes(wt,disp))+geom_point()+geom_abline(intercept=-80,slope=100,colour="red")+ggtitle("무게에 따른 이동범위")+theme_bw()
# 범주형 x 범주형
ggplot(mtcars, aes(vs,fill=factor(cyl)))+geom_bar(position=position_dodge())+ggtitle("엔진 유형에 따른 실린더 수")+theme_bw()
# 연속형 x 범주형
ggplot(iris, aes(x=factor(Species), y=Sepal.Width))+geom_boxplot(aes(fill=factor(Species)))+ggtitle("붓꽃 유형에 따른 꽃받침의 너비")+theme_bw()
ggplot(iris,aes(x=Sepal.Width,fill=Species))+geom_density(alpha=.3)+ggtitle("붓꽃 유형에 따른 꽃받침의 너비 밀도")+theme_bw()
ggplot(diamonds,aes(price,fill=clarity))+geom_histogram(binwidth = 600)+ggtitle("선명도 수준에 따른 다이아몬드의 가격분포")+scale_fill_brewer("YlGn")+theme_bw()
ggplot(diamonds,aes(price,fill=clarity))+geom_histogram(binwidth = 600)+ggtitle("선명도 수준에 따른 다이아몬드의 가격분포")+scale_fill_brewer("YlGn")+theme_bw()
ggplot(diamonds,aes(carat,price))+geom_point(aes(colour=clarity))+ggtitle("罹먮읉?뿉 ?뵲瑜? ?떎?씠?븘紐щ뱶?쓽 媛寃? + ?꽑紐낅룄 ?닔以")+theme_bw()
# 연속형 x 연속형 + a
ggplot(mtcars,aes(wt,disp))+geom_point(aes(size=cyl))+ggtitle("臾닿쾶?뿉 ?뵲瑜? ?씠?룞踰붿쐞 + ?떎由곕뜑 ?닔")+theme_bw()
# 연속형 x 연속형 + a
ggplot(mtcars,aes(wt,disp))+geom_point(aes(size=cyl))+ggtitle("무게에 따른 이동범위 + 실린더 수")+theme_bw()
ggplot(diamonds,aes(carat,price))+geom_point(aes(colour=clarity))+ggtitle("캐럿에 따른 다이아몬드의 가격 + 선명도 수준")+theme_bw()
ggplot(diamonds,aes(carat,price))+geom_point(aes(colour=clarity))+ggtitle("캐럿에 따른 다이아몬드의 가격 + 선명도 수준")+theme_bw()
# 1) 도표 분할
ggplot(diamonds,aes(carat))+geom_histogram(binwidth = 0.5,aes(fill=..count..))+facet_wrap(~ cut, ncol=5)+theme_bw()
# 2) 다른 두 산점도를 한 번에 시각화
ggplot(iris)+geom_point(aes(Sepal.Length,Sepal.Width),colour="brown",pch=17)+geom_point(aes(Petal.Length,Petal.Width),colour="purple",pch=19)+theme_bw()
customer_dat <- read.csv("C:/Users/Gargantua/Desktop/data_analysis/Project4_R_KoreaBankingInstitute/working/lesson_9/customer_dat.csv")
View(customer_dat)
x<-c(1,2,3)
y<-c("남","여","남")
df<-data.frame(x,y)
df
# 2) 고객 데이터 불러오기
str(customer)
# 2) 고객 데이터 불러오기
str(customer_dat)
head(customer_dat)
# 3) 5명의 고객을 임의로 추출
sample(1:10)
# 3) 5명의 고객을 임의로 추출
sample(1:10,5)
# 3) 5명의 고객을 임의로 추출
customer_dat[sample(nrow(customer_dat),5),]
# 4) 서울에 거주하는 남성 고객들의 id, 성별, 가입일자 정보를 출력
customer_dat[area=="서울", "id", "gender", "register"]
# 4) 서울에 거주하는 남성 고객들의 id, 성별, 가입일자 정보를 출력
customer_dat[customer_dat$area=="서울", "id", "gender", "register"]
subser(customer_dat, gernder=='남자' & area=='서울', 'id', 'register')
subset(customer_dat, gernder=='남자' & area=='서울', 'id', 'register')
subset(customer_dat, gender=='남자' & area=='서울', 'id', 'register')
# 4) 서울에 거주하는 남성 고객들의 id, 성별, 가입일자 정보를 출력
customer_dat[customer_dat$area=="서울", ]
# 4) 서울에 거주하는 남성 고객들의 id, 성별, 가입일자 정보를 출력
customer_dat[customer_dat$area=="서울", c("id", "gender", "register")]
subset(customer_dat, gender=='남자' & area=='서울', c('id', 'register'))
subset(customer_dat, gender=='남자' & area=='서울', c('id', "gender", 'register'))
# 5) 전체 고객을 구매 금액이 높은 순으로 나열
aggregate(id~cost, data=customer_dat, max)
# 5) 전체 고객을 구매 금액이 높은 순으로 나열
aggregate(id~cost, data=customer_dat, min)
# 5) 전체 고객을 구매 금액이 높은 순으로 나열
aggregate(id~cost, data=customer_dat, mean)
# 5) 전체 고객을 구매 금액이 높은 순으로 나열
aggregate(id~cost, data=customer_dat, mean)
# 5) 전체 고객을 구매 금액이 높은 순으로 나열
customer_dat[order(-customer_dat$cost)]
# 5) 전체 고객을 구매 금액이 높은 순으로 나열
customer_dat[order(-customer_dat$cost),]
# 6) 구매 금액이 가낭 높은 남성 고객과 여성 고객의 id 확인
customer_dat[order(customer_dat$gender, -customer_dat$cost),]
# 7) 서울 지역에 거주하는 고객 중 가장 구매 금액이 낮은 고객의 id 확인.
customer_dat[customer_dat$area=="서울",]
# 7) 서울 지역에 거주하는 고객 중 가장 구매 금액이 낮은 고객의 id 확인.
customer_dat[customer_dat$area=="서울",][order(-customer_dat$cost)]
# 7) 서울 지역에 거주하는 고객 중 가장 구매 금액이 낮은 고객의 id 확인.
customer_dat[customer_dat$area=="서울",][order(customer_dat$cost),]
# 7) 서울 지역에 거주하는 고객 중 가장 구매 금액이 낮은 고객의 id 확인.
seoul<-customer_dat[customer_dat$area=="서울",]
seoul[order(-customer_dat$cost),]
seoul[order(-customer_dat$cost),]
seoul[order(customer_dat$cost),]
# 7) 서울 지역에 거주하는 고객 중 가장 구매 금액이 낮은 고객의 id 확인.
seoul<-customer_dat[customer_dat$area=="서울",]
seoul[order(customer_dat$cost),]
seoul[order(customer_dat$cost),]
# 7) 서울 지역에 거주하는 고객 중 가장 구매 금액이 낮은 고객의 id 확인.
customer_dat
seoul<-customer_dat[customer_dat$area=="서울",]
seoul
seoul[order(seoul$cost),]
# 2) 고객 id와 금액만 출력
customer_dat[,c("id","cost")]
customer_dat[,c(1:3)]
customer_dat[,c(1,3)]
customer_dat[,-c(2,4,5)]
# 3) 금액 기준으로 상위고객, 하위고객을 정의
customer_dat$level <- ifelse(customer_dat$cost>570000, "HIGH", "LOW")
customer_dat
# 4) 월별 구매 금액 총액 계산
aggregate(customer_dat$cost, data=customer_dat, sum)
# 4) 월별 구매 금액 총액 계산
aggregate(customer_dat$id~customer_dat$register, data=customer_dat, sum)
# 4) 월별 구매 금액 총액 계산
aggregate(customer_dat$cost~customer_dat$register, data=customer_dat, sum)
customer_dat$month <- subst(customer_dat$register,6,7)
customer_dat$register <- as.character(customer_dat$register)
customer_dat$month <- subst(customer_dat$register,6,7)
customer_dat$month <- subsr(customer_dat$register,6,7)
customer_dat$month <- substr(customer_dat$register,6,7)
aggregate(cost~month, data=customer_dat, sum)
travel <- read.csv("C:/Users/Gargantua/Desktop/data_analysis/Project4_R_KoreaBankingInstitute/working/lesson_10/travel.csv")
View(travel)
# 1) 데이터 불러오기 및 탐색
travel
head(travel)
str(travel)
# 2) 가장 높은 총액을 소비한 상위 10 고객
aggregate(id~cost, data=travel, sum)
# 2) 가장 높은 총액을 소비한 상위 10 고객
aggregate(cust_id~cost, data=travel, sum)
# 2) 가장 높은 총액을 소비한 상위 10 고객
aggregate(cost~cust_id, data=travel, sum)
cost_sum <- aggregate(cost~cust_id, data=travel, sum)
cost_sum[order(-cost_sum$cost),]
cost_sum[order(-cost_sum$cost):10,]
cost_sum[order(-cost_sum$cost),]
cost_sum[order(-cost_sum$cost),][10]
cost_sum[order(-cost_sum$cost),][10,]
cost_sum[order(-cost_sum$cost),][1:10,]
# 3) 가장 높은 평균 금액을 소비한 상위 10 고객
aggregate(cost~cust_id, data=travel, mean)
cost_mean <- aggregate(cost~cust_id, data=travel, mean)
cost_mean[order(-cost_mean$cost),][1:10,]
# 4) 가장 낮은 총액을 보이는 세 도시
aggregate(cost~destination, data=travel, sum)
cost_sum_destination <- aggregate(cost~destination, data=travel, sum)
cost_sum_destination[order(cost_sum_destination$cost),][1:3,]
# 5) 일본에 방문한 총 고객 수
aggregate(cust_id~country, data=travel, count)
cost_sum_destination[order(cost_sum_destination$cost),][destination]
# 5) 일본에 방문한 총 고객 수
aggregate(cust_id~country, data=travel, )
# 5) 일본에 방문한 총 고객 수
travel[travel$country=="일본",]
length(travel[travel$country=="일본",][,'id'].as.set)
aggregate((cost~cust_id, data=japan_visit, sum()))
aggregate((cost~cust_id, data=japan_visit, sum)
aggregate((cost~cust_id, data=japan_visit, sum)
aggregate(cost~cust_id, data=japan_visit, sum)
# 5) 일본에 방문한 총 고객 수
japan_visit <- travel[travel$country=="일본",]
aggregate(cost~cust_id, data=japan_visit, sum)
# 6) 가장 많이 여행한 고객
travel$visit <- 1
aggregate(visit~cust_id, data=travel, sum)
visit_sum[(order(visit_sum$visit)),][1,]
visit_sum<-aggregate(visit~cust_id, data=travel, sum)
visit_sum[(order(visit_sum$visit)),][1,]
visit_sum[(order(-visit_sum$visit)),][1,]
# 7) 가장 여행을 많이 다닌 상위 3고객이 방문한 도시
visit_sum[(order(-visit_sum$visit)),][1:3,'cust_id']
# 7) 가장 여행을 많이 다닌 상위 3고객이 방문한 도시
top_3<-visit_sum[(order(-visit_sum$visit)),][1:3,'cust_id']
travel[travel$cust_id==top_3,]
# 7) 가장 여행을 많이 다닌 상위 3고객이 방문한 도시
subset(travel, travel$cust_id==1 | travel$cust_id==2 | travel$cust_id==3)
# 7) 가장 여행을 많이 다닌 상위 3고객이 방문한 도시
top3_city <- subset(travel, travel$cust_id==1 | travel$cust_id==2 | travel$cust_id==3)
aggregate(visit~destination, data=top3_city, sum)
# 1) 데이터 생성(국적정보, 성별 정보)
nat<- data.frame(id=c(1,2,3),nationality=c("한국","프랑스","일본"))
gen<-data.frame(id=c(2,3,4),gender=c("남성","여성","남성"))
nat
gen
# 2) 내부 병합
merge(x=nat,y=gen,by='id')
# 3) 부분외부병합 (국적정보기준)
merge(x=nat,y=gen,by='id',all.x=TRUE)
# 4) 부분외부병합 (성별정보기준)
merge(x=nat,y=gen,by='id',all.y=TRUE)
# 5) 전체외부병합
merge(x=nat,y=gen,by='id',all=TRUE)
CL_16 <- read.csv("C:/Users/Gargantua/Desktop/data_analysis/Project4_R_KoreaBankingInstitute/working/lesson_11/2015_16_UEFFA_CL_KOCKOUT_STAGE.csv")
View(CL_16)
Award <- read.csv("C:/Users/Gargantua/Desktop/data_analysis/Project4_R_KoreaBankingInstitute/working/lesson_11/2016_AWARD_NOMINEE.csv", sep="")
View(Award)
aggregate(goals~player, data=CL_16, sum())
aggregate(Goals~player, data=CL_16, sum())
aggregate(Goals~Player, data=CL_16, sum())
aggregate(Goals~Player, data=CL_16, sum)
merge(x=player_sum_16, y=Award, by="Player", all.y=TRUE)
player_sum_16 <- aggregate(Goals~Player, data=CL_16, sum)
merge(x=player_sum_16, y=Award, by="Player", all.y=TRUE)
Euro <- read.csv("C:/Users/Gargantua/Desktop/data_analysis/Project4_R_KoreaBankingInstitute/working/lesson_11/2016_UEFA_Euro.csv")
View(Euro)
# 3) 2016 유로 대회에서 입상한 국가에 속한 선수들의 16 시즌 득점 기록
Euro
aggregate(Goals~Nationality, data=CL_16, sum)
National_Sum_16 <- aggregate(Goals~Nationality, data=CL_16, sum)
merge(x=National_Sum_16, y=Euro, all.y=TRUE)
merge(x=National_Sum_16, y=Euro, by='Nationality' all.y=TRUE)
merge(x=National_Sum_16, y=Euro, by='Nationality' ,all.y=TRUE)
CL_15 <- read.csv("C:/Users/Gargantua/Desktop/data_analysis/Project4_R_KoreaBankingInstitute/working/lesson_11/2014_15_UEFA_CL_GOALS.csv")
View(CL_15)
merge(x=CL_15, y=CL_16, by='Player', all=TRUE)
merge(x=CL_15, y=player_sum_16, by='Player', all=TRUE)
merge(xx=CL_15, y=player_sum_16, by='Player', all=TRUE)
merge(x=CL_15, y=player_sum_16, by='Player', all=TRUE)
merge(x=CL_15, y=player_sum_16, by='Player')
x<-5
if (x > 3){
print("more than 3")
}
x<-0
if (x > 3){
print("more than 3")
}
y<-5
if(y>0){
print("more than 0")
}
if(y>0){
print("more than 0")
elseif{
print("less than 0")
}
}
if(y>0){
print("more than 0")
} else{
print("less than 0")
}
y<-0
if(y>0){
print("more than 0")
} else{
print("less than 0")
}
z <- c(1:5)
for(i in z){
print(i)
}
square<-function(x){
x^2
}
for(i in z){
print(square(i))
}
v <- c("남자")
x <- c(1:10)
type(v)
typeof(v)
typeof(x)
if(v=="남자"){
print("남성 고객")
} else{
print("여성 고객")
}
v <- "여자"
if(v=="남자"){
print("남성 고객")
} else{
print("여성 고객")
}
v <- "남자"
for(y in x){
print(10+5x)
}
for(y in x){
print(10+5*x)
}
print(10+x)
for(y in x){
print(10+x)
}
for(y in x){
print(10+y)
}
for(x in x){
print(10+x)
}
for(x in x){
y=10+5x
print(y)
}
for(x in x){
y=10+5*x
print(y)
}
for(x in x){
y=10+5*x
print(y)
}
for(i in x){
y=10+5*i
print(y)
}
y=10+5*i;print(y)
for(i in x){
y=10+5*i;print(y)
}
y=10+5*i, print(y)
print(i)
for(i in x){
print(i)
}
x <- c(1:10)
for(i in x){
print(i)
}
for(i in x){
y = 10+5*i
print(y)
}
for(x in x){
y = 10+5*i
print(y)
}
x <- c(1:10)
while(x){
y=10+5*x
print(y)
}
break
while(x){
y=10+5*x
print(y)
break
}
pass
if(v=="남자"){
print("남성 고객")
} else{
print("여성 고객")
}
for(i in x){
y = 10+5*i
print(y)
}
standardize(x)
standardize <- function(x){
return((x-mean(x))/sd(x))
}
standardize(x)
mean(x)
setwd("C:\\Users\\Gargantua\\Desktop\\data_analysis\\Project6_R_Bigdata")
library(MASS)
library(dplyr)
hmeq = read.csv("C:/Users/Gargantua/Desktop/data_analysis/Project6_R_Bigdata/DataSet/hmeq.txt", header = T, sep = "\t")
hmeq = read.csv("C:/Users/Gargantua/Desktop/data_analysis/Project6_R_Bigdata/DataSet/hmeq.txt", header = T, sep = "\t")
hmeq = read.csv("C:/Users/Gargantua/Desktop/data_analysis/Project6_R_Bigdata/DataSet/hmeq.txt")
hmeq = read.csv("C:/Users/Gargantua/Desktop/data_analysis/Project6_R_Bigdata/DataSet/hmeq.txt")
hmeq = read.csv("C:/Users/Gargantua/Desktop/data_analysis/Project6_R_Bigdata/DataSet/hmeq.txt")
hmeq = read.csv("C:/Users/Gargantua/Desktop/data_analysis/Project6_R_Bigdata/DataSet/hmeq.txt", header=T, sep='\t')
str(hmeq)
na.omit(hmeq)
hmeq2 = na.omit(hmeq)
any(is.na(hmeq2))
set.seed(1234)
train = sample(nrow(hmeq2), nrow(hmeq2) * 0.6)
hmeq2$BAD = as.factor(hmeq2$BAD)
class(hmeq2$BAD)
library(rpart)
hmeq2_train = hmeq2[train,]
hmeq2_test = hmeq2[-train,]
nrow(hmeq2)
nrow(hmeq2_train)
3515*0.6
nrow(hmeq2_test)
model = rpart(BAD ~ VALUE + DELINQ + CLNO + DEBTINC, data = hmeq2_train)
print(model)
plot(model)
text(model)
plot(model)
text(model)
plot(model)
text(model)
## test데이터 통한 예측
predict(model, newdata = hmeq2_test)
## test데이터 통한 예측
predict(model, newdata = hmeq2_test, type = "class")
## test데이터 통한 예측
pred = predict(model, newdata = hmeq2_test, type = "class")
table(hmeq2_test$BAD, pred)
table[0,1]
(11+83) / (1270+11+83+42)
setwd("C:\\Users\\Gargantua\\Desktop\\data_analysis\\Project6_R_Bigdata")
library(MASS)
library(dplyr)
titanic = read.csv('DataSet/titanic.csv', stringsAsFactors = T)
summary(titanic)
str(titanic)
titanic %>%
filter(pclass == '3rd')
titanic %>%
filter(pclass == '3rd') %>%
group_by(survived) %>%
summarise(mean = mean())
titanic %>%
filter(pclass == '3rd') %>%
summarise(mean = mean(survived))
a = titanic %>% filter(pclass = '3rd')
a = titanic %>% filter(pclass == '3rd')
a[,'survived'] / nrow(a)
sum(a[,'survived']) / nrow(a)
titanic %>%
filter(pclass == '3rd') %>%
summarise(mean = mean(survived))
#(c)
titanic %>%
group_by(pclass) %>%
summarise(mean_survived = mean(survived))
titanic_not_na = titanic %>% filter(!is.na(age))
nrow(titanic_not_na %>%
filter(age>=20)) / nrow(titanic_not_na)
titanic %>%
mutate(age_group = ifelse(age >= 17, "Adult", "Child")) %>%
summarise(mean = mean(survived))
titanic %>%
mutate(age_group = ifelse(age >= 17, "Adult", "Child")) %>%
group_by(sex, age_group, pclass) %>%
summarise(mean = mean(survived))
titanic %>%
filter(!is.na(age)) %>%
mutate(age_group = ifelse(age >= 17, "Adult", "Child")) %>%
group_by(sex, age_group, pclass) %>%
summarise(mean = mean(survived))
titanic %>%
filter(!is.na(age)) %>%
mutate(age_group = ifelse(age >= 17, "Adult", "Child")) %>%
group_by(sex, age_group, pclass) %>%
summarise(mean_survived = mean(survived))
titanic %>%
mutate(family = sibsp + parch)
titanic %>%
summarise(table = table(embarked))
table(titanic[["embarked"]])
table(titanic[,"embarked"])
nrow(titanic[[is.na(titanic$embarked)]])
nrow(titanic[is.na(titanic$embarked)])
is.na(titanic$embarked)
nrow(titanic[,is.na(titanic$embarked)])
titanic[is.na(titanic$embarked)]
titanic[,is.na(titanic$embarked)]
nrow(titanic[is.na(titanic$embarked),])
titanic[is.na(titanic$embarked),]
titanic[is.na(titanic$embarked),]
nrow(titanic[is.na(titanic$embarked),])
titanic[is.na(titanic$embarked),"embarked"] = "Southampton"
any(is.na(titanic$embarked))
table(titanic$embarked, titanic$pclass)
?glm
data_test = titanic_not_na %>%
mutate(family = sibsp + parch)
model_logistic = glm(survived ~ plcass + age + fare + sex + family + embarked, data = data_test)
model_logistic = glm(survived ~ pclass + age + fare + sex + family + embarked, data = data_test)
summary(model_logistic)
library(gapminder)
install.packages("gapminder")
library(gapminder)
data("gapminder")
summary("gapminder")
summary(gapminder)
str(gapminder)
gapminder$totalGDP = with(gapminder, pop + gdpPercap)
names(gapminder)
gapminder %>%
group_by(continent) %>%
summarise(a = summary(gapminder))
gapminder %>%
group_by(continent) %>%
summarise(median_gdp = median(gdpPercap), mean_gdp = mean(gdpPercap), n = table(gdpPercap))
gapminder %>%
summarise(median_gdp = median(gdpPercap), mean_gdp = mean(gdpPercap), n = table(gdpPercap))
gapminder %>%
group_by(continent) %>%
summarise(median_gdp = median(gdpPercap), mean_gdp = mean(gdpPercap), n = table(gdpPercap))
gapminder %>%
group_by(continent) %>%
summarise(median_gdp = median(gdpPercap), mean_gdp = mean(gdpPercap))
gapminder %>%
group_by(continent) %>%
summarise(median_gdp = median(gdpPercap), mean_gdp = mean(gdpPercap), n=n(gdpPercap))
gapminder %>%
group_by(continent) %>%
summarise(median_gdp = median(gdpPercap), mean_gdp = mean(gdpPercap), n=n())
